{"ast":null,"code":"import { getAllUsers, createUser, login } from '../api/user.api';\nimport { toastError, toastSuccess } from '../utils/core.utils';\n\nclass User {\n  constructor() {\n    this.setResponse = data => {\n      this.respond = data;\n    };\n\n    this.getResponse = () => {\n      return this.respond;\n    };\n\n    this.addUser = async user => {\n      await createUser(user).then(({\n        result\n      }) => {\n        console.log(\"results from add\", res);\n        const {\n          data\n        } = result;\n        console.log(\"user data to add\", data);\n        const {\n          success,\n          message,\n          response\n        } = data;\n        console.log(success, message);\n\n        if (success) {\n          console.log(\"success\");\n          toastSuccess(message);\n          console.log(\"response\", response);\n          this.setResponse(response);\n        } else {\n          toastError(message);\n          this.setResponse([]);\n          console.log(message);\n        }\n      });\n    };\n\n    this.LoginUser = async user => {\n      await login(user).then(result => {\n        const {\n          data\n        } = result;\n        const {\n          success,\n          message\n        } = data;\n\n        if (success) {\n          toastSuccess(message);\n          this.setResponse(data);\n        } else {\n          toastError(message);\n          this.setResponse([]);\n        }\n      });\n    };\n\n    this.getUsers = async () => {\n      await getAllUsers().then(result => {\n        const {\n          data\n        } = result;\n        const {\n          success,\n          response,\n          message\n        } = data;\n\n        if (success) {\n          toastSuccess(message);\n          this.setResponse(response);\n        } else {\n          toastError(message);\n          console.log(message);\n        }\n      });\n    };\n\n    this.respond = {\n      success: false,\n      response: null,\n      message: 'An error occured while connecting to the server!'\n    };\n  }\n\n}\n\nexport default new User();","map":{"version":3,"sources":["/home/simo/react-google-keep/frontEnd/src/controller/User.js"],"names":["getAllUsers","createUser","login","toastError","toastSuccess","User","constructor","setResponse","data","respond","getResponse","addUser","user","then","result","console","log","res","success","message","response","LoginUser","getUsers"],"mappings":"AACA,SAAQA,WAAR,EAAoBC,UAApB,EAA+BC,KAA/B,QAA2C,iBAA3C;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,qBAAzC;;AAEC,MAAMC,IAAN,CAAW;AAERC,EAAAA,WAAW,GAAG;AAAA,SAQhBC,WARgB,GAQFC,IAAI,IAAI;AACpB,WAAKC,OAAL,GAAeD,IAAf;AACH,KAViB;;AAAA,SAYlBE,WAZkB,GAYJ,MAAM;AAChB,aAAO,KAAKD,OAAZ;AACH,KAdiB;;AAAA,SAgBlBE,OAhBkB,GAgBR,MAAMC,IAAN,IAAc;AAEpB,YAAMX,UAAU,CAACW,IAAD,CAAV,CAAiBC,IAAjB,CAAsB,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAgB;AACxCC,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCC,GAAhC;AACA,cAAM;AAAET,UAAAA;AAAF,YAAWM,MAAjB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCR,IAAhC;AACG,cAAM;AAAEU,UAAAA,OAAF;AAAWC,UAAAA,OAAX;AAAoBC,UAAAA;AAApB,YAAiCZ,IAAvC;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAYE,OAAZ,EAAoBC,OAApB;;AACA,YAAID,OAAJ,EAAa;AACxBH,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACYZ,UAAAA,YAAY,CAACe,OAAD,CAAZ;AAEGJ,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBI,QAAvB;AACA,eAAKb,WAAL,CAAiBa,QAAjB;AACH,SAND,MAMO;AAENjB,UAAAA,UAAU,CAACgB,OAAD,CAAV;AAEG,eAAKZ,WAAL,CAAiB,EAAjB;AACAQ,UAAAA,OAAO,CAACC,GAAR,CAAYG,OAAZ;AAEH;AACP,OApBK,CAAN;AAqBH,KAvCiB;;AAAA,SAyClBE,SAzCkB,GAyCN,MAAMT,IAAN,IAAc;AACtB,YAAMV,KAAK,CAACU,IAAD,CAAL,CAAYC,IAAZ,CAAmBC,MAAF,IAAc;AAGjC,cAAM;AAAEN,UAAAA;AAAF,YAAWM,MAAjB;AAEG,cAAM;AAAEI,UAAAA,OAAF;AAAWC,UAAAA;AAAX,YAAuBX,IAA7B;;AAEA,YAAIU,OAAJ,EAAa;AAEZd,UAAAA,YAAY,CAACe,OAAD,CAAZ;AAEG,eAAKZ,WAAL,CAAiBC,IAAjB;AACH,SALD,MAKO;AAENL,UAAAA,UAAU,CAACgB,OAAD,CAAV;AACG,eAAKZ,WAAL,CAAiB,EAAjB;AAGH;AACP,OAnBK,CAAN;AAoBH,KA9DiB;;AAAA,SAgElBe,QAhEkB,GAgEP,YAAY;AAEnB,YAAMtB,WAAW,GAAGa,IAAd,CAAqBC,MAAF,IAAc;AACnC,cAAM;AAAEN,UAAAA;AAAF,YAAWM,MAAjB;AACA,cAAM;AAACI,UAAAA,OAAD;AAASE,UAAAA,QAAT;AAAkBD,UAAAA;AAAlB,YAA2BX,IAAjC;;AAEA,YAAIU,OAAJ,EAAa;AACTd,UAAAA,YAAY,CAACe,OAAD,CAAZ;AACA,eAAKZ,WAAL,CAAiBa,QAAjB;AACH,SAHD,MAGO;AACHjB,UAAAA,UAAU,CAACgB,OAAD,CAAV;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAYG,OAAZ;AACH;AACJ,OAXK,CAAN;AAYH,KA9EiB;;AACV,SAAKV,OAAL,GAAe;AACXS,MAAAA,OAAO,EAAE,KADE;AAEXE,MAAAA,QAAQ,EAAE,IAFC;AAGXD,MAAAA,OAAO,EAAE;AAHE,KAAf;AAKH;;AARO;;AAkFZ,eAAe,IAAId,IAAJ,EAAf","sourcesContent":["\nimport {getAllUsers,createUser,login} from '../api/user.api'\nimport { toastError, toastSuccess } from '../utils/core.utils';\n\n class User {\n\n    constructor() {\n        this.respond = {\n            success: false,\n            response: null,\n            message: 'An error occured while connecting to the server!'\n        };\n    }\n\n  setResponse = data => {\n    this.respond = data;\n};\n\ngetResponse = () => {\n    return this.respond;\n};\n\naddUser = async user => {\n\n    await createUser(user).then(({ result }) => {\n        console.log(\"results from add\", res)\n        const { data } = result;\n        console.log(\"user data to add\", data)\n           const { success, message, response } = data;\n           console.log(success,message)\n           if (success) {\nconsole.log(\"success\")\n            toastSuccess(message)\n\n               console.log(\"response\",response)\n               this.setResponse(response);\n           } else {\n\n            toastError(message)\n            \n               this.setResponse([]);\n               console.log(message);\n            \n           }\n    });\n};\n\nLoginUser = async user => {\n    await login(user).then(( result ) => {\n\n\n        const { data } = result;\n\n           const { success, message } = data;\n\n           if (success) {\n\n            toastSuccess(message)\n\n               this.setResponse(data);\n           } else {\n\n            toastError(message)\n               this.setResponse([]);\n\n\n           }\n    });\n};\n\ngetUsers = async () => {\n\n    await getAllUsers().then(( result ) => {\n        const { data } = result;\n        const {success,response,message}=data;\n\n        if (success) {\n            toastSuccess(message)\n            this.setResponse(response);\n        } else {\n            toastError(message)\n            console.log(message);\n        }\n    });\n};\n}\nexport default new User();"]},"metadata":{},"sourceType":"module"}