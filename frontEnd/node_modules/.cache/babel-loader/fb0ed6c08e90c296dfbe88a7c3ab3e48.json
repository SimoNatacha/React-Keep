{"ast":null,"code":"import { getAllUsers, createUser, login } from '../api/user.api';\n\nclass User {\n  constructor() {\n    this.setResponse = data => {\n      this.respond = data;\n    };\n\n    this.getResponse = () => {\n      return this.respond;\n    };\n\n    this.addUser = async user => {\n      await createUser(user).then(({\n        result\n      }) => {\n        console.log(\"hello createUser\");\n        const {\n          data,\n          status\n        } = result;\n\n        if (status > 200) {\n          this.props.history.push('/');\n          sessionStorage.clear();\n          localStorage.clear();\n        }\n\n        const {\n          success,\n          message,\n          response\n        } = data;\n\n        if (success) {\n          console.log(\"success\");\n          history.push(`/dashboard`);\n          this.setResponse(response);\n        } else {\n          this.setResponse([]);\n          console.log(message);\n        }\n      });\n    };\n\n    this.LoginUser = async user => {\n      await login(user).then(result => {\n        console.log(\"hello loginUser\");\n        console.log(\"user at login\", user);\n        console.log(\"result at login\", result);\n        const {\n          data,\n          status\n        } = result;\n        console.log(\"data result user\", data);\n        const {\n          success,\n          message,\n          response\n        } = data;\n\n        if (success) {\n          console.log(\"success\");\n          console.log(response);\n          console.log(data);\n          this.setResponse(data);\n        } else {\n          this.setResponse([]);\n          console.log(message);\n        }\n      });\n    };\n\n    this.getUsers = async () => {\n      await getAllUsers().then(result => {\n        const {\n          data\n        } = result;\n        const {\n          success,\n          response,\n          message\n        } = data;\n\n        if (success) {\n          this.setResponse(response);\n        } else {\n          console.log(message);\n        }\n      });\n    };\n\n    this.respond = {\n      success: false,\n      response: null,\n      message: 'An error occured while connecting to the server!'\n    };\n  }\n\n}\n\nexport default new User();","map":{"version":3,"sources":["/home/simo/react-google-keep/frontEnd/src/controller/User.js"],"names":["getAllUsers","createUser","login","User","constructor","setResponse","data","respond","getResponse","addUser","user","then","result","console","log","status","props","history","push","sessionStorage","clear","localStorage","success","message","response","LoginUser","getUsers"],"mappings":"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","sourcesContent":["\nimport {getAllUsers,createUser,login} from '../api/user.api'\n\n class User {\n\n    constructor() {\n        this.respond = {\n            success: false,\n            response: null,\n            message: 'An error occured while connecting to the server!'\n        };\n    }\n\n  setResponse = data => {\n    this.respond = data;\n};\n\ngetResponse = () => {\n    return this.respond;\n};\n\naddUser = async user => {\n    await createUser(user).then(({ result }) => {\n        console.log(\"hello createUser\")\n        const { data ,status} = result;\n\n        if(status >200){\n            this.props.history.push('/');\nsessionStorage.clear();\nlocalStorage.clear();\n        }\n           const { success, message, response } = data;\n           if (success) {\n               console.log(\"success\")\n               history.push(`/dashboard`);\n               this.setResponse(response);\n           } else {\n            \n               this.setResponse([]);\n               console.log(message);\n            \n           }\n    });\n};\n\nLoginUser = async user => {\n    await login(user).then(( result ) => {\n\n        console.log(\"hello loginUser\")\n\n        console.log(\"user at login\", user);\n\n\n        console.log(\"result at login\", result);\n\n        const { data ,status} = result;\n\n        console.log(\"data result user\", data)\n\n           const { success, message, response } = data;\n\n           if (success) {\n               console.log(\"success\")\n               console.log(response);\n               console.log(data);\n\n               this.setResponse(data);\n           } else {\n               this.setResponse([]);\n    \n               console.log(message);\n\n\n           }\n    });\n};\n\ngetUsers = async () => {\n\n    await getAllUsers().then(( result ) => {\n        const { data } = result;\n        const {success,response,message}=data;\n\n        if (success) {\n            this.setResponse(response);\n        } else {\n            console.log(message);\n        }\n    });\n};\n}\nexport default new User();"]},"metadata":{},"sourceType":"module"}