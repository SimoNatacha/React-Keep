{"ast":null,"code":"import { ListUsers, AddUsers, LoginUSER } from '../redux-constants';\nimport user from '../../controller/User';\nimport { USER_ID, USER_LOGGED } from '../../utils/local-Storage.utils';\nexport const addUser = data => async dispatch => {\n  try {\n    console.log(\"hello addUser\");\n    console.log(\"hello addUser data \", data);\n    dispatch({\n      type: AddUsers.ADD_USERS_REQUEST\n    });\n    console.log('before addUser');\n    await user.addUser(data);\n    console.log('after addNote');\n    const respond = user.getResponse();\n\n    if (respond.success) {\n      const {\n        response\n      } = respond;\n      console.log('success');\n      dispatch({\n        type: AddUsers.ADD_USERS_SUCCESS,\n        payload: response\n      });\n    } else {\n      console.log('fails');\n      const {\n        message\n      } = respond;\n      dispatch({\n        type: AddUsers.ADD_USERS_FAIL,\n        payload: message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: AddUsers.ADD_USERS_FAIL,\n      payload: error\n    });\n  }\n};\nexport const LoginU = data => async dispatch => {\n  try {\n    console.log(\"hello loginUser\");\n    console.log(\"hello LoginUser data \", data);\n    dispatch({\n      type: LoginUSER.LOG_USER_REQUEST\n    });\n    console.log('before LoginUser');\n    await user.LoginUser(data);\n    console.log('after LoginUser');\n    const respond = user.getResponse();\n    console.log(\"respond\", respond);\n\n    if (respond.success) {\n      sessionStorage.setItem(USER_LOGGED, true);\n      const {\n        response\n      } = respond;\n      this.props.history.push('/');\n      console.log(\"response of LoginU\", response);\n      sessionStorage.setItem('user', JSON.stringify(response));\n      var _id = JSON.parse(sessionStorage.getItem('user')).id;\n      sessionStorage.setItem(USER_ID, _id);\n      console.log('success');\n      dispatch({\n        type: LoginUSER.LOG_USER__SUCCESS,\n        payload: response\n      });\n    } else {\n      console.log('fails');\n      sessionStorage.setItem(USER_LOGGED, false);\n      const {\n        message\n      } = respond;\n      dispatch({\n        type: LoginUSER.LOG_USER__FAIL,\n        payload: message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: LoginUSER.LOG_USER__FAIL,\n      payload: error\n    });\n  }\n};\nexport const listUser = () => async dispatch => {\n  try {\n    dispatch({\n      type: ListUsers.LIST_USERS_REQUEST\n    });\n    await user.getUsers();\n    const respond = user.getResponse();\n\n    if (respond) {\n      dispatch({\n        type: ListUsers.LIST_USERS_SUCCESS,\n        payload: respond\n      });\n    } else {\n      const {\n        message\n      } = respond;\n      dispatch({\n        type: ListUsers.LIST_USERS_FAIL,\n        payload: message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: ListUsers.LIST_USERS_FAIL,\n      payload: error\n    });\n  }\n};\nexport const listUse = () => async dispatch => {\n  try {\n    dispatch({\n      type: ListUsers.LIST_USERS_REQUEST\n    });\n    await user.getUsers();\n    const respond = user.getResponse();\n\n    if (respond) {\n      dispatch({\n        type: ListUsers.LIST_USERS_SUCCESS,\n        payload: respond\n      });\n    } else {\n      const {\n        message\n      } = respond;\n      dispatch({\n        type: ListUsers.LIST_USERS_FAIL,\n        payload: message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: ListUsers.LIST_USERS_FAIL,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["/home/simo/react-google-keep/frontEnd/src/redux/actions/user.js"],"names":["ListUsers","AddUsers","LoginUSER","user","USER_ID","USER_LOGGED","addUser","data","dispatch","console","log","type","ADD_USERS_REQUEST","respond","getResponse","success","response","ADD_USERS_SUCCESS","payload","message","ADD_USERS_FAIL","error","LoginU","LOG_USER_REQUEST","LoginUser","sessionStorage","setItem","props","history","push","JSON","stringify","_id","parse","getItem","id","LOG_USER__SUCCESS","LOG_USER__FAIL","listUser","LIST_USERS_REQUEST","getUsers","LIST_USERS_SUCCESS","LIST_USERS_FAIL","listUse"],"mappings":"AAAA,SAAQA,SAAR,EAAkBC,QAAlB,EAA4BC,SAA5B,QAA4C,oBAA5C;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAASC,OAAT,EAAiBC,WAAjB,QAAoC,iCAApC;AAKA,OAAO,MAAMC,OAAO,GAAIC,IAAD,IAAU,MAAMC,QAAN,IAAkB;AAC/C,MAAI;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAkCH,IAAlC;AACAC,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEV,QAAQ,CAACW;AADV,KAAD,CAAR;AAGAH,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,UAAMP,IAAI,CAACG,OAAL,CAAaC,IAAb,CAAN;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,UAAMG,OAAO,GAAGV,IAAI,CAACW,WAAL,EAAhB;;AAEA,QAAID,OAAO,CAACE,OAAZ,EAAqB;AACjB,YAAM;AAAEC,QAAAA;AAAF,UAAeH,OAArB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAF,MAAAA,QAAQ,CAAC;AAELG,QAAAA,IAAI,EAAEV,QAAQ,CAACgB,iBAFV;AAGLC,QAAAA,OAAO,EAAEF;AAHJ,OAAD,CAAR;AAKH,KARD,MAQO;AACHP,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,YAAM;AAAES,QAAAA;AAAF,UAAcN,OAApB;AACAL,MAAAA,QAAQ,CAAC;AACLG,QAAAA,IAAI,EAAEV,QAAQ,CAACmB,cADV;AAELF,QAAAA,OAAO,EAAEC;AAFJ,OAAD,CAAR;AAIH;AACJ,GA3BD,CA2BE,OAAOE,KAAP,EAAc;AACZb,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEV,QAAQ,CAACmB,cADV;AAELF,MAAAA,OAAO,EAAEG;AAFJ,KAAD,CAAR;AAIH;AACJ,CAlCM;AAoCP,OAAO,MAAMC,MAAM,GAAIf,IAAD,IAAU,MAAMC,QAAN,IAAkB;AAG9C,MAAI;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAoCH,IAApC;AAGAC,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAET,SAAS,CAACqB;AADX,KAAD,CAAR;AAGAd,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,UAAMP,IAAI,CAACqB,SAAL,CAAejB,IAAf,CAAN;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,UAAMG,OAAO,GAAGV,IAAI,CAACW,WAAL,EAAhB;AAEAL,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBG,OAAvB;;AAEA,QAAIA,OAAO,CAACE,OAAZ,EAAqB;AAEjBU,MAAAA,cAAc,CAACC,OAAf,CAAuBrB,WAAvB,EAAmC,IAAnC;AAEA,YAAM;AAAEW,QAAAA;AAAF,UAAeH,OAArB;AACA,WAAKc,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AAEApB,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCM,QAAlC;AACAS,MAAAA,cAAc,CAACC,OAAf,CAAuB,MAAvB,EAA+BI,IAAI,CAACC,SAAL,CAAef,QAAf,CAA/B;AACA,UAAIgB,GAAG,GAAGF,IAAI,CAACG,KAAL,CAAYR,cAAc,CAACS,OAAf,CAAuB,MAAvB,CAAZ,EAA4CC,EAAtD;AAEAV,MAAAA,cAAc,CAACC,OAAf,CAAuBtB,OAAvB,EAA+B4B,GAA/B;AAGAvB,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAF,MAAAA,QAAQ,CAAC;AAELG,QAAAA,IAAI,EAAET,SAAS,CAACkC,iBAFX;AAGLlB,QAAAA,OAAO,EAAEF;AAHJ,OAAD,CAAR;AAKH,KApBD,MAoBO;AACHP,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAe,MAAAA,cAAc,CAACC,OAAf,CAAuBrB,WAAvB,EAAmC,KAAnC;AACA,YAAM;AAAEc,QAAAA;AAAF,UAAcN,OAApB;AACAL,MAAAA,QAAQ,CAAC;AACLG,QAAAA,IAAI,EAAET,SAAS,CAACmC,cADX;AAELnB,QAAAA,OAAO,EAAEC;AAFJ,OAAD,CAAR;AAKH;AACJ,GA7CD,CA6CE,OAAOE,KAAP,EAAc;AACZb,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAET,SAAS,CAACmC,cADX;AAELnB,MAAAA,OAAO,EAAEG;AAFJ,KAAD,CAAR;AAIH;AACJ,CAtDM;AAwDP,OAAO,MAAMiB,QAAQ,GAAG,MAAM,MAAM9B,QAAN,IAAkB;AAC5C,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEX,SAAS,CAACuC;AADX,KAAD,CAAR;AAIA,UAAMpC,IAAI,CAACqC,QAAL,EAAN;AACA,UAAM3B,OAAO,GAAGV,IAAI,CAACW,WAAL,EAAhB;;AACA,QAAID,OAAJ,EAAa;AACTL,MAAAA,QAAQ,CAAC;AACLG,QAAAA,IAAI,EAAEX,SAAS,CAACyC,kBADX;AAELvB,QAAAA,OAAO,EAAEL;AAFJ,OAAD,CAAR;AAIH,KALD,MAKO;AACH,YAAM;AAAEM,QAAAA;AAAF,UAAcN,OAApB;AACAL,MAAAA,QAAQ,CAAC;AACLG,QAAAA,IAAI,EAAEX,SAAS,CAAC0C,eADX;AAELxB,QAAAA,OAAO,EAAEC;AAFJ,OAAD,CAAR;AAIH;AACJ,GAnBD,CAmBE,OAAOE,KAAP,EAAc;AACZb,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEX,SAAS,CAAC0C,eADX;AAELxB,MAAAA,OAAO,EAAEG;AAFJ,KAAD,CAAR;AAIH;AACJ,CA1BM;AA4BP,OAAO,MAAMsB,OAAO,GAAG,MAAM,MAAMnC,QAAN,IAAkB;AAC3C,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEX,SAAS,CAACuC;AADX,KAAD,CAAR;AAIA,UAAMpC,IAAI,CAACqC,QAAL,EAAN;AACA,UAAM3B,OAAO,GAAGV,IAAI,CAACW,WAAL,EAAhB;;AACA,QAAID,OAAJ,EAAa;AACTL,MAAAA,QAAQ,CAAC;AACLG,QAAAA,IAAI,EAAEX,SAAS,CAACyC,kBADX;AAELvB,QAAAA,OAAO,EAAEL;AAFJ,OAAD,CAAR;AAIH,KALD,MAKO;AACH,YAAM;AAAEM,QAAAA;AAAF,UAAcN,OAApB;AACAL,MAAAA,QAAQ,CAAC;AACLG,QAAAA,IAAI,EAAEX,SAAS,CAAC0C,eADX;AAELxB,QAAAA,OAAO,EAAEC;AAFJ,OAAD,CAAR;AAIH;AACJ,GAnBD,CAmBE,OAAOE,KAAP,EAAc;AACZb,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEX,SAAS,CAAC0C,eADX;AAELxB,MAAAA,OAAO,EAAEG;AAFJ,KAAD,CAAR;AAIH;AACJ,CA1BM","sourcesContent":["import {ListUsers,AddUsers, LoginUSER} from '../redux-constants';\nimport user from '../../controller/User';\nimport { USER_ID,USER_LOGGED } from '../../utils/local-Storage.utils';\n\n\n\n\nexport const addUser = (data) => async dispatch => {\n    try {\n        console.log(\"hello addUser\")\n        console.log(\"hello addUser data \",data)\n        dispatch({\n            type: AddUsers.ADD_USERS_REQUEST\n        });\n        console.log('before addUser');\n        await user.addUser(data);\n        console.log('after addNote');\n        const respond = user.getResponse();\n\n        if (respond.success) {\n            const { response } = respond;\n            console.log('success');\n            dispatch({\n               \n                type: AddUsers.ADD_USERS_SUCCESS,\n                payload: response\n            });\n        } else {\n            console.log('fails');\n            const { message } = respond;\n            dispatch({\n                type: AddUsers.ADD_USERS_FAIL,\n                payload: message\n            });\n        }\n    } catch (error) {\n        dispatch({\n            type: AddUsers.ADD_USERS_FAIL,\n            payload: error\n        });\n    }\n};\n\nexport const LoginU = (data) => async dispatch => {\n \n\n    try {\n        console.log(\"hello loginUser\")\n        console.log(\"hello LoginUser data \",data)\n\n       \n        dispatch({\n            type: LoginUSER.LOG_USER_REQUEST\n        });\n        console.log('before LoginUser');\n        await user.LoginUser(data);\n        console.log('after LoginUser');\n        const respond = user.getResponse();\n\n        console.log(\"respond\", respond);\n\n        if (respond.success) {\n\n            sessionStorage.setItem(USER_LOGGED,true);\n\n            const { response } = respond;\n            this.props.history.push('/');\n\n            console.log(\"response of LoginU\", response)\n            sessionStorage.setItem('user', JSON.stringify(response));\n            var _id = JSON.parse( sessionStorage.getItem('user')).id;\n\n            sessionStorage.setItem(USER_ID,_id);\n\n           \n            console.log('success');\n            dispatch({\n               \n                type: LoginUSER.LOG_USER__SUCCESS,\n                payload: response\n            });\n        } else {\n            console.log('fails');\n            sessionStorage.setItem(USER_LOGGED,false);\n            const { message } = respond;\n            dispatch({\n                type: LoginUSER.LOG_USER__FAIL,\n                payload: message\n            });\n\n        }\n    } catch (error) {\n        dispatch({\n            type: LoginUSER.LOG_USER__FAIL,\n            payload: error\n        });\n    }\n};\n\nexport const listUser = () => async dispatch => {\n    try {\n        dispatch({\n            type: ListUsers.LIST_USERS_REQUEST\n        });\n\n        await user.getUsers();\n        const respond = user.getResponse();\n        if (respond) {\n            dispatch({\n                type: ListUsers.LIST_USERS_SUCCESS,\n                payload: respond\n            });\n        } else {\n            const { message } = respond;\n            dispatch({\n                type: ListUsers.LIST_USERS_FAIL,\n                payload: message\n            });\n        }\n    } catch (error) {\n        dispatch({\n            type: ListUsers.LIST_USERS_FAIL,\n            payload: error\n        });\n    }\n};\n\nexport const listUse = () => async dispatch => {\n    try {\n        dispatch({\n            type: ListUsers.LIST_USERS_REQUEST\n        });\n\n        await user.getUsers();\n        const respond = user.getResponse();\n        if (respond) {\n            dispatch({\n                type: ListUsers.LIST_USERS_SUCCESS,\n                payload: respond\n            });\n        } else {\n            const { message } = respond;\n            dispatch({\n                type: ListUsers.LIST_USERS_FAIL,\n                payload: message\n            });\n        }\n    } catch (error) {\n        dispatch({\n            type: ListUsers.LIST_USERS_FAIL,\n            payload: error\n        });\n    }\n};"]},"metadata":{},"sourceType":"module"}