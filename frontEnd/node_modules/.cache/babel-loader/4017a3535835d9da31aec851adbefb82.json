{"ast":null,"code":"import { AddNotes, ListNotes } from '../redux-constants';\nimport notes from '../../controller/Notes';\nexport const addNotes = data => async dispatch => {\n  try {\n    console.log('hello addNotes');\n    console.log('hello addNotes data ', data);\n    dispatch({\n      type: AddNotes.ADD_NOTE_REQUEST\n    });\n    console.log('before addNote');\n    await notes.addNote(data);\n    console.log('after addNote');\n    const respond = notes.getResponse();\n\n    if (respond.success) {\n      const {\n        response\n      } = respond;\n      console.log('success');\n      dispatch({\n        type: AddNotes.ADD_NOTE_SUCCESS,\n        payload: response\n      });\n    } else {\n      console.log('fails');\n      const {\n        message\n      } = respond;\n      dispatch({\n        type: AddNotes.ADD_NOTE_FAIL,\n        payload: message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: AddNotes.ADD_NOTE_FAIL,\n      payload: error\n    });\n  }\n};\nexport const notesById = userId => async dispatch => {\n  try {\n    dispatch({\n      type: ListNotes.NOTE_LISTING_REQUEST\n    });\n    await notes.getNotes(userId);\n    const respond = notes.getResponse();\n\n    if (respond) {\n      dispatch({\n        type: ListNotes.NOTE_LISTING_SUCCESS,\n        payload: respond\n      });\n    } else {\n      const {\n        message\n      } = respond;\n      dispatch({\n        type: ListNotes.NOTE_LISTING_FAIL,\n        payload: message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: ListNotes.NOTE_LISTING_FAIL,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["/home/simo/react-google-keep/frontEnd/src/redux/actions/notes.js"],"names":["AddNotes","ListNotes","notes","addNotes","data","dispatch","console","log","type","ADD_NOTE_REQUEST","addNote","respond","getResponse","success","response","ADD_NOTE_SUCCESS","payload","message","ADD_NOTE_FAIL","error","notesById","userId","NOTE_LISTING_REQUEST","getNotes","NOTE_LISTING_SUCCESS","NOTE_LISTING_FAIL"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,oBAApC;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAIC,IAAD,IAAU,MAAMC,QAAN,IAAkB;AACnD,MAAI;AACHC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAmCH,IAAnC;AACAC,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAER,QAAQ,CAACS;AADP,KAAD,CAAR;AAGAH,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,UAAML,KAAK,CAACQ,OAAN,CAAcN,IAAd,CAAN;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,UAAMI,OAAO,GAAGT,KAAK,CAACU,WAAN,EAAhB;;AAEA,QAAID,OAAO,CAACE,OAAZ,EAAqB;AACpB,YAAM;AAAEC,QAAAA;AAAF,UAAeH,OAArB;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAF,MAAAA,QAAQ,CAAC;AAERG,QAAAA,IAAI,EAAER,QAAQ,CAACe,gBAFP;AAGRC,QAAAA,OAAO,EAAEF;AAHD,OAAD,CAAR;AAKA,KARD,MAQO;AACNR,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,YAAM;AAAEU,QAAAA;AAAF,UAAcN,OAApB;AACAN,MAAAA,QAAQ,CAAC;AACRG,QAAAA,IAAI,EAAER,QAAQ,CAACkB,aADP;AAERF,QAAAA,OAAO,EAAEC;AAFD,OAAD,CAAR;AAIA;AACD,GA3BD,CA2BE,OAAOE,KAAP,EAAc;AACfd,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAER,QAAQ,CAACkB,aADP;AAERF,MAAAA,OAAO,EAAEG;AAFD,KAAD,CAAR;AAIA;AACD,CAlCM;AAoCP,OAAO,MAAMC,SAAS,GAAGC,MAAM,IAAI,MAAMhB,QAAN,IAAkB;AACpD,MAAI;AACHA,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAEP,SAAS,CAACqB;AADR,KAAD,CAAR;AAIA,UAAMpB,KAAK,CAACqB,QAAN,CAAeF,MAAf,CAAN;AACA,UAAMV,OAAO,GAAGT,KAAK,CAACU,WAAN,EAAhB;;AACA,QAAID,OAAJ,EAAa;AACZN,MAAAA,QAAQ,CAAC;AACRG,QAAAA,IAAI,EAAEP,SAAS,CAACuB,oBADR;AAERR,QAAAA,OAAO,EAAEL;AAFD,OAAD,CAAR;AAIA,KALD,MAKO;AACN,YAAM;AAAEM,QAAAA;AAAF,UAAcN,OAApB;AACAN,MAAAA,QAAQ,CAAC;AACRG,QAAAA,IAAI,EAAEP,SAAS,CAACwB,iBADR;AAERT,QAAAA,OAAO,EAAEC;AAFD,OAAD,CAAR;AAIA;AACD,GAnBD,CAmBE,OAAOE,KAAP,EAAc;AACfd,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAEP,SAAS,CAACwB,iBADR;AAERT,MAAAA,OAAO,EAAEG;AAFD,KAAD,CAAR;AAIA;AACD,CA1BM","sourcesContent":["import { AddNotes, ListNotes } from '../redux-constants';\nimport notes from '../../controller/Notes';\n\nexport const addNotes = (data) => async dispatch => {\n\ttry {\n\t\tconsole.log('hello addNotes');\n\t\tconsole.log('hello addNotes data ',data);\n\t\tdispatch({\n\t\t\ttype: AddNotes.ADD_NOTE_REQUEST\n\t\t});\n\t\tconsole.log('before addNote');\n\t\tawait notes.addNote(data);\n\t\tconsole.log('after addNote');\n\t\tconst respond = notes.getResponse();\n\n\t\tif (respond.success) {\n\t\t\tconst { response } = respond;\n\t\t\tconsole.log('success');\n\t\t\tdispatch({\n               \n\t\t\t\ttype: AddNotes.ADD_NOTE_SUCCESS,\n\t\t\t\tpayload: response\n\t\t\t});\n\t\t} else {\n\t\t\tconsole.log('fails');\n\t\t\tconst { message } = respond;\n\t\t\tdispatch({\n\t\t\t\ttype: AddNotes.ADD_NOTE_FAIL,\n\t\t\t\tpayload: message\n\t\t\t});\n\t\t}\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: AddNotes.ADD_NOTE_FAIL,\n\t\t\tpayload: error\n\t\t});\n\t}\n};\n\nexport const notesById = userId => async dispatch => {\n\ttry {\n\t\tdispatch({\n\t\t\ttype: ListNotes.NOTE_LISTING_REQUEST\n\t\t});\n\n\t\tawait notes.getNotes(userId);\n\t\tconst respond = notes.getResponse();\n\t\tif (respond) {\n\t\t\tdispatch({\n\t\t\t\ttype: ListNotes.NOTE_LISTING_SUCCESS,\n\t\t\t\tpayload: respond\n\t\t\t});\n\t\t} else {\n\t\t\tconst { message } = respond;\n\t\t\tdispatch({\n\t\t\t\ttype: ListNotes.NOTE_LISTING_FAIL,\n\t\t\t\tpayload: message\n\t\t\t});\n\t\t}\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: ListNotes.NOTE_LISTING_FAIL,\n\t\t\tpayload: error\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}