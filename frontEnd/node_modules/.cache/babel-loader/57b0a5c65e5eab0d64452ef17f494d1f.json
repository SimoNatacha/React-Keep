{"ast":null,"code":"import { AddNotes, ListNotes } from '../redux-constants';\nimport notes from '../../controller/Notes';\nexport const addNotes = ({\n  data\n}) => async dispatch => {\n  try {\n    console.log(\"hello addNotes\");\n    cl;\n    dispatch({\n      type: AddNotes.ADD_NOTE_REQUEST\n    });\n    console.log('before addNote');\n    await notes.addNote(data);\n    console.log('after addNote');\n    const respond = notes.getResponse();\n\n    if (respond.success) {\n      const {\n        response\n      } = respond;\n      console.log('success');\n      dispatch({\n        type: AddNotes.ADD_NOTE_SUCCESS,\n        payload: response\n      });\n    } else {\n      console.log('fails');\n      const {\n        message\n      } = respond;\n      dispatch({\n        type: AddNotes.ADD_NOTE_FAIL,\n        payload: message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: AddNotes.ADD_NOTE_FAIL,\n      payload: error\n    });\n  }\n};\nexport const notesById = userId => async dispatch => {\n  try {\n    dispatch({\n      type: ListNotes.NOTE_LISTING_REQUEST\n    });\n    await notes.getNotes(userId);\n    const respond = notes.getResponse();\n\n    if (respond) {\n      dispatch({\n        type: ListNotes.NOTE_LISTING_SUCCESS,\n        payload: respond\n      });\n    } else {\n      const {\n        message\n      } = respond;\n      dispatch({\n        type: ListNotes.NOTE_LISTING_FAIL,\n        payload: message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: ListNotes.NOTE_LISTING_FAIL,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["/home/simo/react-google-keep/frontEnd/src/redux/actions/notes.js"],"names":["AddNotes","ListNotes","notes","addNotes","data","dispatch","console","log","cl","type","ADD_NOTE_REQUEST","addNote","respond","getResponse","success","response","ADD_NOTE_SUCCESS","payload","message","ADD_NOTE_FAIL","error","notesById","userId","NOTE_LISTING_REQUEST","getNotes","NOTE_LISTING_SUCCESS","NOTE_LISTING_FAIL"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,oBAApC;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY,MAAMC,QAAN,IAAkB;AAClD,MAAI;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAC,IAAAA,EAAE;AACFH,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAET,QAAQ,CAACU;AADV,KAAD,CAAR;AAGAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,UAAML,KAAK,CAACS,OAAN,CAAcP,IAAd,CAAN;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,UAAMK,OAAO,GAAGV,KAAK,CAACW,WAAN,EAAhB;;AAEA,QAAID,OAAO,CAACE,OAAZ,EAAqB;AACjB,YAAM;AAAEC,QAAAA;AAAF,UAAeH,OAArB;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAF,MAAAA,QAAQ,CAAC;AAELI,QAAAA,IAAI,EAAET,QAAQ,CAACgB,gBAFV;AAGLC,QAAAA,OAAO,EAAEF;AAHJ,OAAD,CAAR;AAKH,KARD,MAQO;AACHT,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,YAAM;AAAEW,QAAAA;AAAF,UAAcN,OAApB;AACAP,MAAAA,QAAQ,CAAC;AACLI,QAAAA,IAAI,EAAET,QAAQ,CAACmB,aADV;AAELF,QAAAA,OAAO,EAAEC;AAFJ,OAAD,CAAR;AAIH;AACJ,GA3BD,CA2BE,OAAOE,KAAP,EAAc;AACZf,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAET,QAAQ,CAACmB,aADV;AAELF,MAAAA,OAAO,EAAEG;AAFJ,KAAD,CAAR;AAIH;AACJ,CAlCM;AAoCP,OAAO,MAAMC,SAAS,GAAGC,MAAM,IAAI,MAAMjB,QAAN,IAAkB;AACjD,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAER,SAAS,CAACsB;AADX,KAAD,CAAR;AAIA,UAAMrB,KAAK,CAACsB,QAAN,CAAeF,MAAf,CAAN;AACA,UAAMV,OAAO,GAAGV,KAAK,CAACW,WAAN,EAAhB;;AACA,QAAID,OAAJ,EAAa;AACTP,MAAAA,QAAQ,CAAC;AACLI,QAAAA,IAAI,EAAER,SAAS,CAACwB,oBADX;AAELR,QAAAA,OAAO,EAAEL;AAFJ,OAAD,CAAR;AAIH,KALD,MAKO;AACH,YAAM;AAAEM,QAAAA;AAAF,UAAcN,OAApB;AACAP,MAAAA,QAAQ,CAAC;AACLI,QAAAA,IAAI,EAAER,SAAS,CAACyB,iBADX;AAELT,QAAAA,OAAO,EAAEC;AAFJ,OAAD,CAAR;AAIH;AACJ,GAnBD,CAmBE,OAAOE,KAAP,EAAc;AACZf,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAER,SAAS,CAACyB,iBADX;AAELT,MAAAA,OAAO,EAAEG;AAFJ,KAAD,CAAR;AAIH;AACJ,CA1BM","sourcesContent":["import { AddNotes, ListNotes } from '../redux-constants';\nimport notes from '../../controller/Notes';\n\nexport const addNotes = ({data}) => async dispatch => {\n    try {\n        console.log(\"hello addNotes\")\n        cl\n        dispatch({\n            type: AddNotes.ADD_NOTE_REQUEST\n        });\n        console.log('before addNote');\n        await notes.addNote(data);\n        console.log('after addNote');\n        const respond = notes.getResponse();\n\n        if (respond.success) {\n            const { response } = respond;\n            console.log('success');\n            dispatch({\n               \n                type: AddNotes.ADD_NOTE_SUCCESS,\n                payload: response\n            });\n        } else {\n            console.log('fails');\n            const { message } = respond;\n            dispatch({\n                type: AddNotes.ADD_NOTE_FAIL,\n                payload: message\n            });\n        }\n    } catch (error) {\n        dispatch({\n            type: AddNotes.ADD_NOTE_FAIL,\n            payload: error\n        });\n    }\n};\n\nexport const notesById = userId => async dispatch => {\n    try {\n        dispatch({\n            type: ListNotes.NOTE_LISTING_REQUEST\n        });\n\n        await notes.getNotes(userId);\n        const respond = notes.getResponse();\n        if (respond) {\n            dispatch({\n                type: ListNotes.NOTE_LISTING_SUCCESS,\n                payload: respond\n            });\n        } else {\n            const { message } = respond;\n            dispatch({\n                type: ListNotes.NOTE_LISTING_FAIL,\n                payload: message\n            });\n        }\n    } catch (error) {\n        dispatch({\n            type: ListNotes.NOTE_LISTING_FAIL,\n            payload: error\n        });\n    }\n};\n"]},"metadata":{},"sourceType":"module"}