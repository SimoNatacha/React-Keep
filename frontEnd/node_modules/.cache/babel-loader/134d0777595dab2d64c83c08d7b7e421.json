{"ast":null,"code":"import { AddNotes, ListNotes } from '../redux-constants';\nimport notes from '../../controller/Notes';\nexport const addNotes = ({\n  data,\n  userId\n}) => async dispatch => {\n  try {\n    dispatch({\n      type: AddNotes.ADD_NOTE_REQUEST\n    });\n    await notes.addNote(userId, data);\n    const respond = notes.getResponse();\n\n    if (respond.success) {\n      const {\n        response\n      } = respond;\n      dispatch({\n        type: AddNotes.ADD_NOTE_SUCCESS,\n        payload: response\n      });\n    } else {\n      const {\n        message\n      } = respond;\n      dispatch({\n        type: AddNotes.ADD_NOTE_FAIL,\n        payload: message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: AddNotes.ADD_NOTE_FAIL,\n      payload: error\n    });\n  }\n};\nexport const notesById = userId => async dispatch => {\n  try {\n    dispatch({\n      type: ListNotes.NOTE_LISTING_REQUEST\n    });\n    await notes.getNotes(userId);\n    const respond = notes.getResponse();\n\n    if (respond) {\n      dispatch({\n        type: ListNotes.NOTE_LISTING_SUCCESS,\n        payload: respond\n      });\n    } else {\n      const {\n        message\n      } = respond;\n      dispatch({\n        type: ListNotes.NOTE_LISTING_FAIL,\n        payload: message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: ListNotes.NOTE_LISTING_FAIL,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["/home/simo/react-google-keep/frontEnd/src/redux/actions/notes.js"],"names":["AddNotes","ListNotes","notes","addNotes","data","userId","dispatch","type","ADD_NOTE_REQUEST","addNote","respond","getResponse","success","response","ADD_NOTE_SUCCESS","payload","message","ADD_NOTE_FAIL","error","notesById","NOTE_LISTING_REQUEST","getNotes","NOTE_LISTING_SUCCESS","NOTE_LISTING_FAIL"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,oBAApC;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAMC,EAAAA;AAAN,CAAD,KAAmB,MAAMC,QAAN,IAAkB;AACzD,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEP,QAAQ,CAACQ;AADV,KAAD,CAAR;AAIA,UAAMN,KAAK,CAACO,OAAN,CAAcJ,MAAd,EAAqBD,IAArB,CAAN;AACA,UAAMM,OAAO,GAAGR,KAAK,CAACS,WAAN,EAAhB;;AAEA,QAAID,OAAO,CAACE,OAAZ,EAAqB;AACjB,YAAM;AAAEC,QAAAA;AAAF,UAAeH,OAArB;AACAJ,MAAAA,QAAQ,CAAC;AAELC,QAAAA,IAAI,EAAEP,QAAQ,CAACc,gBAFV;AAGLC,QAAAA,OAAO,EAAEF;AAHJ,OAAD,CAAR;AAKH,KAPD,MAOO;AACH,YAAM;AAAEG,QAAAA;AAAF,UAAcN,OAApB;AACAJ,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEP,QAAQ,CAACiB,aADV;AAELF,QAAAA,OAAO,EAAEC;AAFJ,OAAD,CAAR;AAIH;AACJ,GAtBD,CAsBE,OAAOE,KAAP,EAAc;AACZZ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEP,QAAQ,CAACiB,aADV;AAELF,MAAAA,OAAO,EAAEG;AAFJ,KAAD,CAAR;AAIH;AACJ,CA7BM;AA+BP,OAAO,MAAMC,SAAS,GAAGd,MAAM,IAAI,MAAMC,QAAN,IAAkB;AACjD,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEN,SAAS,CAACmB;AADX,KAAD,CAAR;AAIA,UAAMlB,KAAK,CAACmB,QAAN,CAAehB,MAAf,CAAN;AACA,UAAMK,OAAO,GAAGR,KAAK,CAACS,WAAN,EAAhB;;AACA,QAAID,OAAJ,EAAa;AACTJ,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEN,SAAS,CAACqB,oBADX;AAELP,QAAAA,OAAO,EAAEL;AAFJ,OAAD,CAAR;AAIH,KALD,MAKO;AACH,YAAM;AAAEM,QAAAA;AAAF,UAAcN,OAApB;AACAJ,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEN,SAAS,CAACsB,iBADX;AAELR,QAAAA,OAAO,EAAEC;AAFJ,OAAD,CAAR;AAIH;AACJ,GAnBD,CAmBE,OAAOE,KAAP,EAAc;AACZZ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEN,SAAS,CAACsB,iBADX;AAELR,MAAAA,OAAO,EAAEG;AAFJ,KAAD,CAAR;AAIH;AACJ,CA1BM","sourcesContent":["import { AddNotes, ListNotes } from '../redux-constants';\nimport notes from '../../controller/Notes';\n\nexport const addNotes = ({data,userId}) => async dispatch => {\n    try {\n        dispatch({\n            type: AddNotes.ADD_NOTE_REQUEST\n        });\n\n        await notes.addNote(userId,data);\n        const respond = notes.getResponse();\n\n        if (respond.success) {\n            const { response } = respond;\n            dispatch({\n                \n                type: AddNotes.ADD_NOTE_SUCCESS,\n                payload: response\n            });\n        } else {\n            const { message } = respond;\n            dispatch({\n                type: AddNotes.ADD_NOTE_FAIL,\n                payload: message\n            });\n        }\n    } catch (error) {\n        dispatch({\n            type: AddNotes.ADD_NOTE_FAIL,\n            payload: error\n        });\n    }\n};\n\nexport const notesById = userId => async dispatch => {\n    try {\n        dispatch({\n            type: ListNotes.NOTE_LISTING_REQUEST\n        });\n\n        await notes.getNotes(userId);\n        const respond = notes.getResponse();\n        if (respond) {\n            dispatch({\n                type: ListNotes.NOTE_LISTING_SUCCESS,\n                payload: respond\n            });\n        } else {\n            const { message } = respond;\n            dispatch({\n                type: ListNotes.NOTE_LISTING_FAIL,\n                payload: message\n            });\n        }\n    } catch (error) {\n        dispatch({\n            type: ListNotes.NOTE_LISTING_FAIL,\n            payload: error\n        });\n    }\n};\n"]},"metadata":{},"sourceType":"module"}