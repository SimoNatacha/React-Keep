{"ast":null,"code":"import { getAllNotes, createNote } from \"../api/keep.api\";\n\nclass Note {\n  constructor() {\n    this.setResponse = data => {\n      this.respond = data;\n    };\n\n    this.getResponse = () => {\n      return this.respond;\n    };\n\n    this.addNote = async note => {\n      await createNote(note).then(result => {\n        console.log(\"hello createnote\");\n        console.log(\"result at add\", result);\n        const {\n          data\n        } = result;\n        console.log(\"data result note\", data);\n        const {\n          success,\n          message,\n          response\n        } = data;\n        console.log(\"after distructuring\", success, message);\n\n        if (success) {\n          console.log(\"success\");\n          this.setResponse(response);\n        } else {\n          this.setResponse([]);\n          console.log(message);\n        }\n      });\n    };\n\n    this.getNotes = async userId => {\n      await getAllNotes(userId).then(result => {\n        const {\n          data\n        } = result;\n        const {\n          success,\n          response,\n          message\n        } = data;\n\n        if (success) {\n          this.setResponse(response);\n        } else {\n          console.log(message);\n        }\n      });\n    };\n\n    this.respond = {\n      success: false,\n      response: null,\n      message: \"An error occured while connecting to the server!\"\n    };\n  }\n\n}\n\nexport default new Note();","map":{"version":3,"sources":["/home/simo/react-google-keep/frontEnd/src/controller/Notes.js"],"names":["getAllNotes","createNote","Note","constructor","setResponse","data","respond","getResponse","addNote","note","then","result","console","log","success","message","response","getNotes","userId"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,UAAtB,QAAwC,iBAAxC;;AAEA,MAAMC,IAAN,CAAW;AACTC,EAAAA,WAAW,GAAG;AAAA,SAQdC,WARc,GAQCC,IAAD,IAAU;AACtB,WAAKC,OAAL,GAAeD,IAAf;AACD,KAVa;;AAAA,SAYdE,WAZc,GAYA,MAAM;AAClB,aAAO,KAAKD,OAAZ;AACD,KAda;;AAAA,SAgBdE,OAhBc,GAgBJ,MAAOC,IAAP,IAAgB;AACxB,YAAMR,UAAU,CAACQ,IAAD,CAAV,CAAiBC,IAAjB,CAAuBC,MAAD,IAAY;AAEtCC,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,MAA7B;AACA,cAAM;AAAEN,UAAAA;AAAF,YAAWM,MAAjB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCR,IAAhC;AACA,cAAM;AAAES,UAAAA,OAAF;AAAWC,UAAAA,OAAX;AAAoBC,UAAAA;AAApB,YAAiCX,IAAvC;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCC,OAAnC,EAA4CC,OAA5C;;AACA,YAAID,OAAJ,EAAa;AACXF,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,eAAKT,WAAL,CAAiBY,QAAjB;AACD,SAHD,MAGO;AACL,eAAKZ,WAAL,CAAiB,EAAjB;AAEAQ,UAAAA,OAAO,CAACC,GAAR,CAAYE,OAAZ;AACD;AACF,OAhBK,CAAN;AAiBD,KAlCa;;AAAA,SAoCdE,QApCc,GAoCH,MAAOC,MAAP,IAAkB;AAC3B,YAAMlB,WAAW,CAACkB,MAAD,CAAX,CAAoBR,IAApB,CAA0BC,MAAD,IAAY;AACzC,cAAM;AAAEN,UAAAA;AAAF,YAAWM,MAAjB;AACA,cAAM;AAAEG,UAAAA,OAAF;AAAWE,UAAAA,QAAX;AAAqBD,UAAAA;AAArB,YAAiCV,IAAvC;;AAEA,YAAIS,OAAJ,EAAa;AACX,eAAKV,WAAL,CAAiBY,QAAjB;AACD,SAFD,MAEO;AACLJ,UAAAA,OAAO,CAACC,GAAR,CAAYE,OAAZ;AACD;AACF,OATK,CAAN;AAUD,KA/Ca;;AACZ,SAAKT,OAAL,GAAe;AACbQ,MAAAA,OAAO,EAAE,KADI;AAEbE,MAAAA,QAAQ,EAAE,IAFG;AAGbD,MAAAA,OAAO,EAAE;AAHI,KAAf;AAKD;;AAPQ;;AAkDX,eAAe,IAAIb,IAAJ,EAAf","sourcesContent":["import { getAllNotes, createNote } from \"../api/keep.api\";\n\nclass Note {\n  constructor() {\n    this.respond = {\n      success: false,\n      response: null,\n      message: \"An error occured while connecting to the server!\",\n    };\n  }\n\n  setResponse = (data) => {\n    this.respond = data;\n  };\n\n  getResponse = () => {\n    return this.respond;\n  };\n\n  addNote = async (note) => {\n    await createNote(note).then((result) => {\n        \n      console.log(\"hello createnote\");\n      console.log(\"result at add\", result);\n      const { data } = result;\n      console.log(\"data result note\", data);\n      const { success, message, response } = data;\n      console.log(\"after distructuring\", success, message);\n      if (success) {\n        console.log(\"success\");\n        this.setResponse(response);\n      } else {\n        this.setResponse([]);\n\n        console.log(message);\n      }\n    });\n  };\n\n  getNotes = async (userId) => {\n    await getAllNotes(userId).then((result) => {\n      const { data } = result;\n      const { success, response, message } = data;\n\n      if (success) {\n        this.setResponse(response);\n      } else {\n        console.log(message);\n      }\n    });\n  };\n}\nexport default new Note();\n"]},"metadata":{},"sourceType":"module"}