{"ast":null,"code":"import { ListUsers, AddUsers, LoginUSER } from '../redux-constants';\nimport user from '../../controller/User';\nimport { ACCESS_TOKEN, USER_ID, USER_LOGGED, USER } from '../../utils/local-Storage.utils';\nexport const addUser = data => async dispatch => {\n  try {\n    console.log(\"hello addUser data \", data);\n    dispatch({\n      type: AddUsers.ADD_USERS_REQUEST\n    });\n    console.log('before addUser');\n    await user.addUser(data);\n    console.log('after addNote');\n    const respond = user.getResponse();\n\n    if (respond.success) {\n      const {\n        response\n      } = respond;\n      sessionStorage.setItem('user', JSON.stringify(response));\n      var _id = JSON.parse(sessionStorage.getItem('user')).id;\n      var userI = JSON.parse(sessionStorage.getItem('user'));\n      sessionStorage.setItem(USER_ID, _id);\n      sessionStorage.setItem(USER_LOGGED, true);\n      sessionStorage.setItem(ACCESS_TOKEN, respond.token);\n      sessionStorage.setItem(USER, userI);\n      console.log('success');\n      dispatch({\n        type: AddUsers.ADD_USERS_SUCCESS,\n        payload: response\n      });\n    } else {\n      console.log('fails');\n      const {\n        message\n      } = respond;\n      dispatch({\n        type: AddUsers.ADD_USERS_FAIL,\n        payload: message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: AddUsers.ADD_USERS_FAIL,\n      payload: error\n    });\n  }\n};\nexport const LoginU = data => async dispatch => {\n  try {\n    dispatch({\n      type: LoginUSER.LOG_USER_REQUEST\n    });\n    await user.LoginUser(data);\n    const respond = user.getResponse();\n\n    if (respond.success) {\n      const {\n        response\n      } = respond;\n      alert(\"yes\");\n      sessionStorage.setItem('user', JSON.stringify(response));\n      var _id = JSON.parse(sessionStorage.getItem('user')).id;\n      var userI = JSON.parse(sessionStorage.getItem('user'));\n      sessionStorage.setItem(USER_ID, _id);\n      sessionStorage.setItem(USER_LOGGED, true);\n      sessionStorage.setItem(ACCESS_TOKEN, respond.token);\n      sessionStorage.setItem(USER, userI);\n\n      if (respond.token === null) {\n        sessionStorage.clear();\n      }\n\n      dispatch({\n        type: LoginUSER.LOG_USER__SUCCESS,\n        payload: response\n      });\n    } else {\n      console.log('fails');\n      sessionStorage.clear();\n      sessionStorage.setItem(USER_LOGGED, false);\n      const {\n        message\n      } = respond;\n      dispatch({\n        type: LoginUSER.LOG_USER__FAIL,\n        payload: message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: LoginUSER.LOG_USER__FAIL,\n      payload: error\n    });\n  }\n};\nexport const listUser = () => async dispatch => {\n  try {\n    dispatch({\n      type: ListUsers.LIST_USERS_REQUEST\n    });\n    await user.getUsers();\n    const respond = user.getResponse();\n\n    if (respond) {\n      dispatch({\n        type: ListUsers.LIST_USERS_SUCCESS,\n        payload: respond\n      });\n    } else {\n      const {\n        message\n      } = respond;\n      dispatch({\n        type: ListUsers.LIST_USERS_FAIL,\n        payload: message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: ListUsers.LIST_USERS_FAIL,\n      payload: error\n    });\n  }\n};\nexport const listUse = () => async dispatch => {\n  try {\n    dispatch({\n      type: ListUsers.LIST_USERS_REQUEST\n    });\n    await user.getUsers();\n    const respond = user.getResponse();\n\n    if (respond) {\n      dispatch({\n        type: ListUsers.LIST_USERS_SUCCESS,\n        payload: respond\n      });\n    } else {\n      const {\n        message\n      } = respond;\n      dispatch({\n        type: ListUsers.LIST_USERS_FAIL,\n        payload: message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: ListUsers.LIST_USERS_FAIL,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["/home/simo/react-google-keep/frontEnd/src/redux/actions/user.js"],"names":["ListUsers","AddUsers","LoginUSER","user","ACCESS_TOKEN","USER_ID","USER_LOGGED","USER","addUser","data","dispatch","console","log","type","ADD_USERS_REQUEST","respond","getResponse","success","response","sessionStorage","setItem","JSON","stringify","_id","parse","getItem","id","userI","token","ADD_USERS_SUCCESS","payload","message","ADD_USERS_FAIL","error","LoginU","LOG_USER_REQUEST","LoginUser","alert","clear","LOG_USER__SUCCESS","LOG_USER__FAIL","listUser","LIST_USERS_REQUEST","getUsers","LIST_USERS_SUCCESS","LIST_USERS_FAIL","listUse"],"mappings":"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","sourcesContent":["import {ListUsers,AddUsers, LoginUSER} from '../redux-constants';\nimport user from '../../controller/User';\nimport { ACCESS_TOKEN, USER_ID,USER_LOGGED,USER } from '../../utils/local-Storage.utils';\n\nexport const addUser = (data) => async dispatch => {\n    try {\n       \n        console.log(\"hello addUser data \",data)\n        dispatch({\n            type: AddUsers.ADD_USERS_REQUEST\n        });\n        console.log('before addUser');\n        await user.addUser(data);\n        console.log('after addNote');\n        const respond = user.getResponse();\n\n        if (respond.success) {\n            const { response } = respond;\n            sessionStorage.setItem('user', JSON.stringify(response));\n            var _id = JSON.parse( sessionStorage.getItem('user')).id;\nvar userI= JSON.parse( sessionStorage.getItem('user'));\n            sessionStorage.setItem(USER_ID,_id);\n\n            sessionStorage.setItem(USER_LOGGED,true);\n        \n            sessionStorage.setItem(ACCESS_TOKEN,respond.token);\n\n            sessionStorage.setItem(USER,userI);\n            console.log('success');\n            dispatch({\n               \n                type: AddUsers.ADD_USERS_SUCCESS,\n                payload: response\n            });\n        } else {\n            console.log('fails');\n            const { message } = respond;\n            dispatch({\n                type: AddUsers.ADD_USERS_FAIL,\n                payload: message\n            });\n        }\n    } catch (error) {\n        dispatch({\n            type: AddUsers.ADD_USERS_FAIL,\n            payload: error\n        });\n    }\n};\n\nexport const LoginU = (data) => async dispatch => {\n \n\n    try {\n\n       \n        dispatch({\n            type: LoginUSER.LOG_USER_REQUEST\n        });\n        await user.LoginUser(data);\n        const respond = user.getResponse();\n\n\n        if (respond.success) {\n\n            const { response } = respond;\n            alert(\"yes\")\n            sessionStorage.setItem('user', JSON.stringify(response));\n            var _id = JSON.parse( sessionStorage.getItem('user')).id;\nvar userI= JSON.parse( sessionStorage.getItem('user'));\n            sessionStorage.setItem(USER_ID,_id);\n\n            sessionStorage.setItem(USER_LOGGED,true);\n        \n            sessionStorage.setItem(ACCESS_TOKEN,respond.token);\n\n            sessionStorage.setItem(USER,userI);\n\n      \n\n    \n\n            if(respond.token === null){\n                sessionStorage.clear();\n            }\n\n            dispatch({\n               \n                type: LoginUSER.LOG_USER__SUCCESS,\n                payload: response\n            });\n\n\n        } else {\n            console.log('fails');\n            sessionStorage.clear();\n            sessionStorage.setItem(USER_LOGGED,false);\n            const { message } = respond;\n            dispatch({\n                type: LoginUSER.LOG_USER__FAIL,\n                payload: message\n            });\n\n        }\n    } catch (error) {\n        dispatch({\n            type: LoginUSER.LOG_USER__FAIL,\n            payload: error\n        });\n    }\n};\n\nexport const listUser = () => async dispatch => {\n    try {\n        dispatch({\n            type: ListUsers.LIST_USERS_REQUEST\n        });\n\n        await user.getUsers();\n        const respond = user.getResponse();\n        if (respond) {\n            dispatch({\n                type: ListUsers.LIST_USERS_SUCCESS,\n                payload: respond\n            });\n        } else {\n            const { message } = respond;\n            dispatch({\n                type: ListUsers.LIST_USERS_FAIL,\n                payload: message\n            });\n        }\n    } catch (error) {\n        dispatch({\n            type: ListUsers.LIST_USERS_FAIL,\n            payload: error\n        });\n    }\n};\n\nexport const listUse = () => async dispatch => {\n    try {\n        dispatch({\n            type: ListUsers.LIST_USERS_REQUEST\n        });\n\n        await user.getUsers();\n        const respond = user.getResponse();\n        if (respond) {\n            dispatch({\n                type: ListUsers.LIST_USERS_SUCCESS,\n                payload: respond\n            });\n        } else {\n            const { message } = respond;\n            dispatch({\n                type: ListUsers.LIST_USERS_FAIL,\n                payload: message\n            });\n        }\n    } catch (error) {\n        dispatch({\n            type: ListUsers.LIST_USERS_FAIL,\n            payload: error\n        });\n    }\n};"]},"metadata":{},"sourceType":"module"}