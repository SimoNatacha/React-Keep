{"ast":null,"code":"import { ListUsers, AddUsers, LoginUSER } from '../redux-constants';\nimport user from '../../controller/User';\nimport { ACCESS_TOKEN, USER_ID, USER_LOGGED, USER } from '../../utils/local-Storage.utils';\nexport const addUser = data => async dispatch => {\n  try {\n    console.log('hello addUser data ', data);\n    dispatch({\n      type: AddUsers.ADD_USERS_REQUEST\n    });\n    console.log('before addUser');\n    await user.addUser(data);\n    console.log('after addNote');\n    const respond = user.getResponse();\n\n    if (respond.success) {\n      const {\n        response\n      } = respond;\n      sessionStorage.setItem('user', JSON.stringify(response));\n      var _id = JSON.parse(sessionStorage.getItem('user')).id;\n      var userI = JSON.parse(sessionStorage.getItem('user'));\n      sessionStorage.setItem(USER_ID, _id);\n      sessionStorage.setItem(USER_LOGGED, true);\n      sessionStorage.setItem(ACCESS_TOKEN, respond.token);\n      sessionStorage.setItem(USER, userI);\n      console.log('success');\n      dispatch({\n        type: AddUsers.ADD_USERS_SUCCESS,\n        payload: response\n      });\n    } else {\n      console.log('fails');\n      const {\n        message\n      } = respond;\n      dispatch({\n        type: AddUsers.ADD_USERS_FAIL,\n        payload: message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: AddUsers.ADD_USERS_FAIL,\n      payload: error\n    });\n  }\n};\nexport const LoginU = data => async dispatch => {\n  try {\n    dispatch({\n      type: LoginUSER.LOG_USER_REQUEST\n    });\n    await user.LoginUser(data);\n    const respond = user.getResponse();\n    alert('yess');\n\n    if (respond.success) {\n      const {\n        response\n      } = respond;\n      alert('yes');\n      sessionStorage.setItem('user', JSON.stringify(response));\n      var _id = JSON.parse(sessionStorage.getItem('user')).id;\n      var userI = JSON.parse(sessionStorage.getItem('user'));\n      sessionStorage.setItem(USER_ID, _id);\n      sessionStorage.setItem(USER_LOGGED, true);\n      sessionStorage.setItem(ACCESS_TOKEN, respond.token);\n      sessionStorage.setItem(USER, userI);\n\n      if (respond.token === null) {\n        sessionStorage.clear();\n      }\n\n      dispatch({\n        type: LoginUSER.LOG_USER__SUCCESS,\n        payload: response\n      });\n    } else {\n      console.log('fails');\n      sessionStorage.clear();\n      sessionStorage.setItem(USER_LOGGED, false);\n      const {\n        message\n      } = respond;\n      dispatch({\n        type: LoginUSER.LOG_USER__FAIL,\n        payload: message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: LoginUSER.LOG_USER__FAIL,\n      payload: error\n    });\n  }\n};\nexport const listUser = () => async dispatch => {\n  try {\n    dispatch({\n      type: ListUsers.LIST_USERS_REQUEST\n    });\n    await user.getUsers();\n    const respond = user.getResponse();\n\n    if (respond) {\n      dispatch({\n        type: ListUsers.LIST_USERS_SUCCESS,\n        payload: respond\n      });\n    } else {\n      const {\n        message\n      } = respond;\n      dispatch({\n        type: ListUsers.LIST_USERS_FAIL,\n        payload: message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: ListUsers.LIST_USERS_FAIL,\n      payload: error\n    });\n  }\n};\nexport const listUse = () => async dispatch => {\n  try {\n    dispatch({\n      type: ListUsers.LIST_USERS_REQUEST\n    });\n    await user.getUsers();\n    const respond = user.getResponse();\n\n    if (respond) {\n      dispatch({\n        type: ListUsers.LIST_USERS_SUCCESS,\n        payload: respond\n      });\n    } else {\n      const {\n        message\n      } = respond;\n      dispatch({\n        type: ListUsers.LIST_USERS_FAIL,\n        payload: message\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: ListUsers.LIST_USERS_FAIL,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["/home/simo/react-google-keep/frontEnd/src/redux/actions/user.js"],"names":["ListUsers","AddUsers","LoginUSER","user","ACCESS_TOKEN","USER_ID","USER_LOGGED","USER","addUser","data","dispatch","console","log","type","ADD_USERS_REQUEST","respond","getResponse","success","response","sessionStorage","setItem","JSON","stringify","_id","parse","getItem","id","userI","token","ADD_USERS_SUCCESS","payload","message","ADD_USERS_FAIL","error","LoginU","LOG_USER_REQUEST","LoginUser","alert","clear","LOG_USER__SUCCESS","LOG_USER__FAIL","listUser","LIST_USERS_REQUEST","getUsers","LIST_USERS_SUCCESS","LIST_USERS_FAIL","listUse"],"mappings":"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","sourcesContent":["import {ListUsers,AddUsers, LoginUSER} from '../redux-constants';\nimport user from '../../controller/User';\nimport { ACCESS_TOKEN, USER_ID,USER_LOGGED,USER } from '../../utils/local-Storage.utils';\n\nexport const addUser = (data) => async dispatch => {\n\ttry {\n       \n\t\tconsole.log('hello addUser data ',data);\n\t\tdispatch({\n\t\t\ttype: AddUsers.ADD_USERS_REQUEST\n\t\t});\n\t\tconsole.log('before addUser');\n\t\tawait user.addUser(data);\n\t\tconsole.log('after addNote');\n\t\tconst respond = user.getResponse();\n\n\t\tif (respond.success) {\n\t\t\tconst { response } = respond;\n\t\t\tsessionStorage.setItem('user', JSON.stringify(response));\n\t\t\tvar _id = JSON.parse( sessionStorage.getItem('user')).id;\n\t\t\tvar userI= JSON.parse( sessionStorage.getItem('user'));\n\t\t\tsessionStorage.setItem(USER_ID,_id);\n\n\t\t\tsessionStorage.setItem(USER_LOGGED,true);\n        \n\t\t\tsessionStorage.setItem(ACCESS_TOKEN,respond.token);\n\n\t\t\tsessionStorage.setItem(USER,userI);\n\t\t\tconsole.log('success');\n\t\t\tdispatch({\n               \n\t\t\t\ttype: AddUsers.ADD_USERS_SUCCESS,\n\t\t\t\tpayload: response\n\t\t\t});\n\t\t} else {\n\t\t\tconsole.log('fails');\n\t\t\tconst { message } = respond;\n\t\t\tdispatch({\n\t\t\t\ttype: AddUsers.ADD_USERS_FAIL,\n\t\t\t\tpayload: message\n\t\t\t});\n\t\t}\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: AddUsers.ADD_USERS_FAIL,\n\t\t\tpayload: error\n\t\t});\n\t}\n};\n\nexport const LoginU = (data) => async dispatch => {\n \n\n\ttry {\n\n       \n\t\tdispatch({\n\t\t\ttype: LoginUSER.LOG_USER_REQUEST\n\t\t});\n\t\tawait user.LoginUser(data);\n\t\tconst respond = user.getResponse();\n\n\t\talert('yess');\n\t\tif (respond.success) {\n\n\t\t\tconst { response } = respond;\n\t\t\talert('yes');\n\t\t\tsessionStorage.setItem('user', JSON.stringify(response));\n\t\t\tvar _id = JSON.parse( sessionStorage.getItem('user')).id;\n\t\t\tvar userI= JSON.parse( sessionStorage.getItem('user'));\n\t\t\tsessionStorage.setItem(USER_ID,_id);\n\n\t\t\tsessionStorage.setItem(USER_LOGGED,true);\n        \n\t\t\tsessionStorage.setItem(ACCESS_TOKEN,respond.token);\n\n\t\t\tsessionStorage.setItem(USER,userI);\n\n      \n\n    \n\n\t\t\tif(respond.token === null){\n\t\t\t\tsessionStorage.clear();\n\t\t\t}\n\n\t\t\tdispatch({\n               \n\t\t\t\ttype: LoginUSER.LOG_USER__SUCCESS,\n\t\t\t\tpayload: response\n\t\t\t});\n\n\n\t\t} else {\n\t\t\tconsole.log('fails');\n\t\t\tsessionStorage.clear();\n\t\t\tsessionStorage.setItem(USER_LOGGED,false);\n\t\t\tconst { message } = respond;\n\t\t\tdispatch({\n\t\t\t\ttype: LoginUSER.LOG_USER__FAIL,\n\t\t\t\tpayload: message\n\t\t\t});\n\n\t\t}\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: LoginUSER.LOG_USER__FAIL,\n\t\t\tpayload: error\n\t\t});\n\t}\n};\n\nexport const listUser = () => async dispatch => {\n\ttry {\n\t\tdispatch({\n\t\t\ttype: ListUsers.LIST_USERS_REQUEST\n\t\t});\n\n\t\tawait user.getUsers();\n\t\tconst respond = user.getResponse();\n\t\tif (respond) {\n\t\t\tdispatch({\n\t\t\t\ttype: ListUsers.LIST_USERS_SUCCESS,\n\t\t\t\tpayload: respond\n\t\t\t});\n\t\t} else {\n\t\t\tconst { message } = respond;\n\t\t\tdispatch({\n\t\t\t\ttype: ListUsers.LIST_USERS_FAIL,\n\t\t\t\tpayload: message\n\t\t\t});\n\t\t}\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: ListUsers.LIST_USERS_FAIL,\n\t\t\tpayload: error\n\t\t});\n\t}\n};\n\nexport const listUse = () => async dispatch => {\n\ttry {\n\t\tdispatch({\n\t\t\ttype: ListUsers.LIST_USERS_REQUEST\n\t\t});\n\n\t\tawait user.getUsers();\n\t\tconst respond = user.getResponse();\n\t\tif (respond) {\n\t\t\tdispatch({\n\t\t\t\ttype: ListUsers.LIST_USERS_SUCCESS,\n\t\t\t\tpayload: respond\n\t\t\t});\n\t\t} else {\n\t\t\tconst { message } = respond;\n\t\t\tdispatch({\n\t\t\t\ttype: ListUsers.LIST_USERS_FAIL,\n\t\t\t\tpayload: message\n\t\t\t});\n\t\t}\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: ListUsers.LIST_USERS_FAIL,\n\t\t\tpayload: error\n\t\t});\n\t}\n};"]},"metadata":{},"sourceType":"module"}